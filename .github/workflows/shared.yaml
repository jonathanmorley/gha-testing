on:
  workflow_call:
    inputs:
      package-manager:
        type: string
        default: 'pnpm'
      runners:
        type: string
        default: '["ubuntu-latest"]'
      build:
        type: string
        default: '[]'
      lint:
        type: string
        default: '[]'
      unit-test:
        type: string
        default: '[]'
      integration-test:
        type: string
        default: '[]'
jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create manifest
        id: plan
        uses: actions/github-script@v7
        with:
          script: |
            const defaultRunners = JSON.parse(core.getInput('runners'));

            const targetIncludes = {
              build: JSON.parse(core.getInput('build')),
              lint: JSON.parse(core.getInput('lint')),
              'unit-test': JSON.parse(core.getInput('unit-test')),
              'integration-test': JSON.parse(core.getInput('integration-test')),
            };

            const defaultTargets = Object.entries(targetConfigs)
              .filter(([_, includes]) => includes.length === 0)
              .map(([target]) => target);

            const defaultIncludes = defaultRunners.map(runner => ({
              runner,
              targets = defaultTargets
            }));
            const customIncludes = Object.entries(targetConfigs)
              .filter(([_, includes]) => includes.length > 0)
              .map(([target, includes]) => ({
                targets,
                includes: includes.map(include => ({
                  runner: include.runner,
                  targets: [target]
                }))
              }));
            const includes = [...defaultIncludes, ...customIncludes];

            const plan = { matrix: { include: includes } };
            console.log(plan);

            return plan;
        env:
          INPUT_RUNNERS: ${{ inputs.runners }}
          INPUT_BUILD: ${{ inputs.build }}
          INPUT_LINT: ${{ inputs.lint }}
          INPUT_UNIT-TEST: ${{ inputs.unit-test }}
          INPUT_INTEGRATION-TEST: ${{ inputs.integration-test }}
    outputs:
      plan: ${{ steps.plan.outputs.result }}
  default:
    needs: [plan]
    strategy:
      matrix: ${{ fromJson(needs.plan.outputs.plan).matrix }}
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v2
      - uses: jdx/mise-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: pnpm install
      - run: pnpm run nx affected --target=${{ join(fromJson(needs.plan.outputs.plan).targets) }} ${{ join(fromJson(needs.plan.outputs.plan).args) }}
