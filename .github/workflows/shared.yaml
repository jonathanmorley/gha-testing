on:
  workflow_call:
    inputs:
      runners:
        type: string
        default: '["ubuntu-latest"]'
      build:
        type: string
        default: '{}'
      lint:
        type: string
        default: '{}'
      unit-test:
        type: string
        default: '{}'
      integration-test:
        type: string
        default: '{}'
jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create manifest
        id: plan
        uses: actions/github-script@v7
        with:
          script: |
            const runners = JSON.parse(core.getInput('runners'));
            console.log(runners);

            const build = JSON.parse(core.getInput('build'));
            console.log(build);

            const lint = JSON.parse(core.getInput('lint'));
            console.log(lint);

            const unitTest = JSON.parse(core.getInput('unit-test'));
            console.log(unitTest);

            const integrationTest = JSON.parse(core.getInput('integration-test'));
            console.log(integrationTest);

            const baseTargets = [];
            if (Object.keys(build).length === 0) baseTargets.push('build');
            if (Object.keys(lint).length === 0) baseTargets.push('lint');
            if (Object.keys(unitTest).length === 0) baseTargets.push('unit-test');
            if (Object.keys(integrationTest).length === 0) baseTargets.push('integration-test');

            const baseIncludes = runners.map(runner => ({ runner, targets: baseTargets }));
            console.log(baseIncludes);

            return { includes: baseIncludes };
        env:
          INPUT_RUNNERS: ${{ inputs.runners }}
          INPUT_BUILD: ${{ inputs.build }}
          INPUT_LINT: ${{ inputs.lint }}
          INPUT_UNIT-TEST: ${{ inputs.unit-test }}
          INPUT_INTEGRATION-TEST: ${{ inputs.integration-test }}
    outputs:
      plan: ${{ steps.plan.outputs.result }}
  shards:
    needs: [plan]
    strategy:
      matrix: ${{ fromJson(needs.plan.outputs.plan).includes }}
    runs-on: ${{ matrix.includes.runner }}
    steps:
      - uses: actions/checkout@v2
      - uses: jdx/mise-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: pnpm install
      - run: pnpm nx run-many -t ${{ join(matrix.includes.targets) }}
